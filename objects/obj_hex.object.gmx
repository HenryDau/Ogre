<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hex</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_hex_hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw=false;
radius = 5;
has_unit = false;
cost = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show valid moves

var unit = instance_place(x, y, obj_defender);
show_valid_moves(unit.current_movement);
global.defender = unit;
global.tile = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attacker Movement Turn

if (global.turn == "AM"){

    // Attacker turn
    
    if (instance_number(obj_result) &gt; 0){
        with (obj_result)
            instance_destroy();
    }
    
    if (!global.paused){
        if (sprite_index == spr_valid_hex){
            global.tile.has_unit = false;
            global.tile = noone;
            
            with(obj_ogre){
            
                // Check if the ogre moved
                if (other.id == get_tile_at_ogre())
                    obj_ogre.current_movement--;
                else
                    current_movement = other.cost;
                x = other.x;
                y = other.y;
            }
            
            with(obj_hex){
                sprite_index = spr_hex
                cost = 0;
            }
            
            var def = instance_place(x,y,obj_defender);
            if (def != noone){
                
                // RAM!
                sprite_index = spr_hex;
                
                if (def.name == "Command Post"){
                    with (def)
                        instance_destroy();
                        
                    var display = instance_create(784, 160, obj_result);
                    display.sprite_index = spr_kill;
                    
                } else {
                
                    var infantry = instance_place(x,y,obj_infantry)
                    if (infantry != noone){
                        
                        // Moving through infantry
                        if (instance_number(obj_antipersonnel) &gt; 0)
                            launch_attack();
                        
                    } else {
                    
                        // Ram an armor unit
                        var treads_to_destroy = 1;
                        
                        // If its a heavy tank, the cost is 2
                        if (def.name == "Heavy Tank")
                            treads_to_destroy = 2;
                                
                        if (def.name == "Howitzer" || def.disabled) {
                        
                            if (obj_ogre.rams_this_turn &gt;= obj_ogre.MAX_RAMS){
                                show_debug_message("Hex 99: I shouldn't be able to ram...");
                            } else {
                            
                                var display = instance_create(784, 160, obj_result);
                                display.sprite_index = spr_kill;
                                       
                                with (def)
                                    instance_destroy();
                            }
                        } else {
                            // Not a howizter or disabled
                            launch_attack();
                        }
                        
                        var ratio_before = instance_number(obj_tread) / obj_ogre.tread_count;
                        
                        // Destroy treads for ramming
                        with (obj_tread){
                            if (treads_to_destroy &gt; 0)
                                instance_destroy();
                            treads_to_destroy--;
                        }   
                        
                        // Find out the ogre's current movement
                        var ratio_after = instance_number(obj_tread) / obj_ogre.tread_count;
                        
                        // Remove movement if that's what happends
                        if (ratio_before &gt; 2/3 &amp;&amp; ratio_after &lt;= 2/3
                                || ratio_before &gt; 1/3 &amp;&amp; ratio_after &lt;= 1/3
                                || ratio_before &gt; 0 &amp;&amp; ratio_after &lt;= 0)
                            obj_ogre.current_movement--;
                            
                        obj_ogre.rams_this_turn++;
                    }
                }
            }
              
            if (obj_ogre.current_movement &gt; 1){
                show_valid_moves(obj_ogre.current_movement); 
            }
            has_unit = true;
            
            check_multiple_units();
            
        }
        
        var unit = instance_place(x, y, obj_ogre);
        if (unit != noone){     // If its an ogre...
            show_valid_moves(unit.current_movement);
            global.tile = id;
        }
        
        global.tile = id;
    
    }
    
    if (obj_ogre.y &gt;= 672 &amp;&amp; obj_ogre.current_movement &gt; 0){
        obj_run_button.visible = true;
    } else {
        obj_run_button.visible = false;
    }
    
    check_win(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message(string(northeast));
//draw=true;

if (global.turn == "DS" ){
    if (global.unit_selected == "Delete"){
        if (has_unit){
            var unit = instance_place(x, y, obj_defender);
            with(unit)
                instance_destroy();
        }
    } else {
        if (!has_unit &amp;&amp; sprite_index == spr_valid_hex &amp;&amp; global.unit_selected != "None"){
            instance_create(x,y,get_selected_unit());
            has_unit = true;
        }
    }

} else if (global.turn == "AS"){
    if (global.unit_selected == "Delete"){
        if (has_unit){
            var unit = instance_place(x, y, obj_ogre);
            if (unit != noone){     // Have to check because now defenders are on the board
                with(unit)
                    instance_destroy();
                sprite_index = spr_hex;
            }
        }
    } else {
        if (!has_unit &amp;&amp; sprite_index == spr_valid_hex &amp;&amp; global.unit_selected != "None"){
            obj_hex.sprite_index = spr_hex;
            instance_create(x,y,get_selected_unit());
            has_unit = true;
        }
    }  
} else if (global.turn == "DM" || global.turn == "DM2"){
    // Defender turn
    if (sprite_index == spr_valid_hex){
        if (global.defender != noone){
            var unit = instance_place(x,y, obj_infantry)
            if (global.defender.cost_type == "infantry" &amp;&amp; unit != noone){
                if (unit != global.defender){       // Gotta do this check so a unit doesn't move onto itself
                    show_debug_message("Special infantry stacking...");
                    
                    // Current unit is an infantry moving onto an infantry, so do special infantry stacking
                    var new_attack = global.defender.attack + unit.attack;
                    
                    // Move the infantry and change its attack
                    with (global.defender){
                        if (unit.current_movement != 0)
                            current_movement = other.cost;
                        else
                            current_movement = 0;
                        x = other.x;
                        y = other.y;
                        attack = new_attack;
                        defense = new_attack;
                        if (new_attack == 2){
                            sprite_index = spr_infantry_2
                            name = "Infantry 2"
                        } else {  
                            sprite_index = spr_infantry_3
                            name = "Infantry 3"
                        }
                    }
                    
                    // Destroy the old unit
                    with (unit)
                        instance_destroy();
                    
                    // Tell the old tile it doesn't have a unit anymore and remove last selected tile
                    global.tile.has_unit = false;
                    global.tile = noone;
                    
                    // Reset all tiles
                    with(obj_hex){
                        sprite_index = spr_hex
                        cost = 0;
                    }
                    
                    // If the unit still has moves left, show those moves
                    if (global.defender.current_movement &gt; 1){
                        
                        show_valid_moves(global.defender.current_movement);
                        global.tile = id;
                    }
                    
                    // Clear the defender in case it was destroyed
                    //global.defender = noone;
                    
                    // Tell the tile it has a unit
                    has_unit = true;
                    
                    check_multiple_units();
                }
            } else {
                // Normal movement
                global.tile.has_unit = false;
                global.tile = noone;
                
                with (global.defender){
                    current_movement = other.cost;
                    x = other.x;
                    y = other.y;
                }
                
                with(obj_hex){
                    sprite_index = spr_hex
                    cost = 0;
                }
                
                if (global.defender.current_movement &gt; 1){
                    show_valid_moves(global.defender.current_movement);
                    global.tile = id;
                }
                has_unit = true;
                
                if (id == get_tile_at_ogre()){
                    // RAMMED!
                    with (global.defender)
                        instance_destroy();
                    var destroyed = false;
                    with (obj_tread){
                        if (!destroyed)
                            instance_destroy();
                        destroyed = true;
                    }
                }
                
                check_multiple_units()
            }
        } else {
            // Valid hex but a unit wasn't selected...
        }  
    } else {
    
        with(obj_hex){
            cost = 0;
            sprite_index = spr_hex;
        }
        
        // There is a unit, is it an ogre or defender?
        var unit = instance_place(x, y, obj_defender);
        //show_debug_message("Hex 161: Defender " + string(unit.disabled)); 
        if (unit != noone &amp;&amp; !unit.disabled){
             
            alarm[0] = 1;
            // If this is a defender (Delay with alarm, mostly for infantry stacking)
            //show_valid_moves(unit.current_movement);
            //global.defender = unit;
            //global.tile = id;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
//draw_text(x,y,string(cost));
if (draw){
    //radius ++;
    //if (northeast != noone)
    //    draw_circle(northeast.x, northeast.y, radius, c_white); 
    //draw_circles();
    draw_adjacents();
    //draw_circle(x, y, 3, c_black); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
