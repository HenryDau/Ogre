<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define constants and displays

audio_stop_all();

if (global.sound_enabled)
    if (global.intense_music)
        audio_play_sound(snd_intense, 10, true);
    else
        audio_play_sound(snd_background, 10, true);

randomize();

global.unit_selected = "None";
global.selected_tile = noone;
global.turn = "DS"
global.defender = noone;
global.target = false;
global.paused = false;

MAX_WIDTH = view_wview;
MAX_HEIGHT = view_hview;
zoom = 1;

if (1){
    infantry_units = global.infantry_units;
    armor_units = global.armor_units;
    forward_attack = global.forward_units;
} else {
    infantry_units = 20;
    armor_units = 12;
    forward_attack = 20;
}
f_units = forward_attack;

obj_attack_button.visible = false;

obj_run_button.visible = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// View stuff

x_start = 448;
y_start = 96;
offset = 5;

global.selected_display = instance_create(x_start - 50, y_start - 63, obj_display);
global.selected_display.this_unit = "None";

var disp = instance_create(x_start, y_start, obj_display);
disp.sprite_index = spr_heavy_tank;
disp.this_unit = "Heavy Tank";

var disp = instance_create(x_start, y_start + 32, obj_display);
disp.sprite_index = spr_missile_tank;
disp.this_unit = "Missile Tank";

var disp = instance_create(x_start, y_start + 32 * 2, obj_display);
disp.sprite_index = spr_gev;
disp.this_unit = "GEV";

var disp = instance_create(x_start, y_start + 32 * 3, obj_display);
disp.sprite_index = spr_howitzer;
disp.this_unit = "Howitzer";

var disp = instance_create(x_start, y_start + 32 * 4, obj_display);
disp.sprite_index = spr_infantry;
disp.this_unit = "Infantry 1";

var disp = instance_create(x_start, y_start + 32 * 5, obj_display);
disp.sprite_index = spr_infantry_2;
disp.this_unit = "Infantry 2";

var disp = instance_create(x_start, y_start + 32 * 6, obj_display);
disp.sprite_index = spr_infantry_3;
disp.this_unit = "Infantry 3";

var disp = instance_create(x_start, y_start + 32 * 7, obj_display);
disp.sprite_index = spr_cp;
disp.this_unit = "Command Post";

var disp = instance_create(x_start, y_start + 32 * 8, obj_display);
disp.sprite_index = spr_delete;
disp.this_unit = "Delete";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup

if (global.turn == "DS"){
    // Defender setup
    
    f_units = forward_attack
    with(obj_defender){
        var obstructed_y = 480;
        var crater_y = 224;
        
        if (y &lt;= obstructed_y &amp;&amp; y &gt; crater_y)
            other.f_units -= attack;//get_attack_value(object_index);
    }
        
    
    i_units = infantry_units;
    with(obj_infantry)
        other.i_units -= attack;
        
    a_units = armor_units - (instance_number(obj_defender) + instance_number(obj_howitzer) 
                          - instance_number(obj_infantry) - instance_number(obj_cp));
    
    if (instance_number(obj_cp) &gt; 0)
        obj_done_button.visible = true;
    else   
        obj_done_button.visible = false;
        
    if (global.unit_selected != "None"){
    
        if (global.unit_selected != "Delete"){
        
            var unit = get_selected_unit();
            if (unit == obj_cp){
                if (instance_number(obj_cp) &gt; 0){
                    invalidate_selected();
                } else 
                    show_valid_tiles()
                    
            } else if (unit == obj_infantry){
                var cost;
                if (global.unit_selected == "Infantry 1")
                    cost = 1;
                if (global.unit_selected == "Infantry 2")
                    cost = 2;
                if (global.unit_selected == "Infantry 3")
                    cost = 3; 
                if (cost &gt; i_units){
                    invalidate_selected();
                } else 
                    show_valid_tiles();
                    
            } else {
                var cost = 1;
                if (unit == obj_howitzer)
                    cost++;
                if (cost &gt; a_units){
                    invalidate_selected();
                } else
                    show_valid_tiles()
            }   
        } else 
            show_occupied_tiles();
    } else
        obj_hex.sprite_index = spr_hex;
        
} else if (global.turn == "AS"){
    // Attacker setup
    
    if (instance_number(obj_ogre) &gt; 0)
        obj_done_button.visible = true;
    else   
        obj_done_button.visible = false;
    
    if (global.unit_selected != "Delete"){
        if (instance_number(obj_ogre) &gt; 0){
            // Invalidate current selection
            invalidate_selected();
        } else {
            show_valid_tiles();
        }
    } else {
        show_occupied_tiles();
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// The game

/*if (!global.paused &amp;&amp; keyboard_check(vk_escape)){
    instance_create(room_width / 2, room_height / 2, obj_settings)
    
    global.paused = true;
}*/

if (global.turn == "AM"){
    //show_debug_message("Attacker");
    
    if (get_selected_unit() == obj_ogre){
        
    } else {
        obj_hex.sprite_index = spr_hex;
    }

} else if (global.turn == "AA"){

} else if (global.turn == "DM" || global.turn == "DM2"){
    // Defender movement

} else if (global.turn == "DA"){
    // Defender Attack
    var selected_units = 0;
    with (obj_defender){
        if (selected){
            selected_units++;
        }
    }
    if (selected_units &gt; 0 &amp;&amp; global.target != noone){
        if (selected_units &gt; 1 &amp;&amp; global.target.sprite_index == spr_tread){
            obj_attack_button.visible = false;
        } else
            obj_attack_button.visible = true;
    } else
        obj_attack_button.visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zooming
if (mouse_wheel_down()){
    //if (view_hview[0] &lt; MAX_HEIGHT &amp;&amp; view_wview[0] &lt; MAX_WIDTH){
    if (zoom &lt; 1){
        zoom /= .9;
        
        /*view_hview[0] /= .9;
        view_wview[0] /= .9;
        show_debug_message("Zooming out...:" + string(view_hview[0]));
        */
    } else {
        zoom = 1;
    }
}

if (mouse_wheel_up()){
    //if (view_hview[0] &gt; 200 &amp;&amp; view_wview[0] &gt; 200){
    if (zoom &gt; .2){
        zoom *= .9;
        /*view_hview[0] *= .9;
        view_wview[0] *= .9;
        show_debug_message("Zooming in...:" + string(view_hview[0]));
        */
    }
}

var _mouse_x, _mouse_y
_mouse_x = (mouse_x - view_xview) / view_wview;
_mouse_y = (mouse_y - view_yview) / view_hview;

view_wview = MAX_WIDTH * zoom;
view_hview = MAX_HEIGHT * zoom;

if (zoom == 1){
    view_xview = 0;
    view_yview = 0;
} else {
    view_xview = mouse_x - view_wview * _mouse_x;
    view_yview = mouse_y - view_hview * _mouse_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (!global.paused){
    global.selected_unit = noone;
    global.defender = noone;
    global.targe = noone;
    global.unit_selected = "None";
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the game
//var vertical_index = 0;

var turn_display_y_offset = -60;

if (global.turn == "DS"){
    // Defender setup
    
    draw_sprite(spr_ds, -1, x_start + 200, y_start + turn_display_y_offset);
    
    // Displays for selecting defense units
    draw_text_color(x_start + 32, y_start - offset, "Heavy Tank", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32, "Missile Tank", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32 * 2, "GEV", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32 * 3, "Howitzer", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32 * 4, "Infantry 1", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32 * 5, "Infantry 2", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32 * 6, "Infantry 3", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32 * 7, "Command Post", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32 * 8, "Delete", c_black, c_black, c_black, c_black, 1);
    
    // Show invalid selections
    if (i_units &lt; 3){
        draw_text_color(x_start + 32, y_start - offset + 32 * 6, "-----------------         Not enough units", c_red, c_red, c_red, c_red, 1);
    }
    if (i_units &lt; 2){
        draw_text_color(x_start + 32, y_start - offset + 32 * 5, "-----------------         Not enough units", c_red, c_red, c_red, c_red, 1);
    }
    if (i_units &lt; 1){
        draw_text_color(x_start + 32, y_start - offset + 32 * 4, "-----------------         Not enough units", c_red, c_red, c_red, c_red, 1);
    }
    if (a_units &lt; 1){
        draw_text_color(x_start + 32, y_start - offset, "-------------------       Not enough units", c_red, c_red, c_red, c_red, 1);
        draw_text_color(x_start + 32, y_start - offset + 32, "--------------------      Not enough units", c_red, c_red, c_red, c_red, 1);
        draw_text_color(x_start + 32, y_start - offset + 32 * 2, "------                Not enough units", c_red, c_red, c_red, c_red, 1);
    }
    if (a_units &lt; 2){
        draw_text_color(x_start + 32, y_start - offset + 32 * 3, "---------------          Not enough units", c_red, c_red, c_red, c_red, 1);
    }  
    if (instance_number(obj_cp) &gt; 0){
        draw_text_color(x_start + 32, y_start - offset + 32 * 7, "------------------------    Command Post already placed", c_red, c_red, c_red, c_red, 1);
    }
    
    // Show selected unit
    //draw_text_color(x_start, y_start - 64 - 32, "Selected Unit", c_black, c_black, c_black, c_black, 1);
    //draw_text_color(x_start + 32, y_start - offset - 64, global.unit_selected, c_black, c_black, c_black, c_black, 1);
    
    // Show units remaining
    draw_text_color(x_start, y_start - offset + 32 * 10, "Infantry units left: " + string(i_units), c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start, y_start - offset + 32 * 11, "Armor units left: " + string(a_units), c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start, y_start - offset + 32 * 12, "Forward Attack left: " + string(f_units), c_black, c_black, c_black, c_black, 1);
    
} else if (global.turn == "AS"){
    // Attacker setup
    
    draw_sprite(spr_as, -1, x_start + 200, y_start + turn_display_y_offset);
    
    draw_text_color(x_start + 32, y_start - offset, "Ogre Mk III", c_black, c_black, c_black, c_black, 1);
    draw_text_color(x_start + 32, y_start - offset + 32, "Delete", c_black, c_black, c_black, c_black, 1);
    
    //show_valid_tiles(obj_ogre);
    
    if (instance_number(obj_ogre) &gt; 0){
        draw_text_color(x_start + 32, y_start - offset, "--------------------- Ogre already placed", c_red, c_red, c_red, c_red, 1);
    }
} else {
    // Draw the game
    show_ogre_details();
    if (global.turn == "AA"){
        draw_sprite(spr_aa, -1, x_start + 200, y_start + turn_display_y_offset);
        //draw_text_color(x_start + 200, y_start  + 200, "Combined Range: " + string(global.combined_attack_range), c_black, c_black, c_black, c_black, 1);
    } else if (global.turn == "AM")
        draw_sprite(spr_am, -1, x_start + 200, y_start + turn_display_y_offset);
    else if (global.turn == "DM")
        draw_sprite(spr_dm, -1, x_start + 200, y_start + turn_display_y_offset);
    else if (global.turn == "DA")
        draw_sprite(spr_da, -1, x_start + 200, y_start + turn_display_y_offset);
    else if (global.turn == "DM2")
        draw_sprite(spr_dm2, -1, x_start + 200, y_start + turn_display_y_offset);
}

// Show selected unit
draw_text_color(x_start - 50, y_start - 64 - 32, "Selected Unit", c_black, c_black, c_black, c_black, 1);
draw_text_color(x_start + 24 - 50, y_start - offset - 64, global.unit_selected, c_black, c_black, c_black, c_black, 1);

if (global.turn != "AS"){
    if (global.turn == "DS"){
    
        // Move unit details in setup mode
        show_current_unit_details(400, 500);
    } else {
    
        // Show current unit details
        show_current_unit_details(400, 50);
    }
}

if (global.turn == "AA" || global.turn == "DA"){

    var chance = get_odds();    // Returns [disable, kill, odds_str, combined_attack]
    
    // Show attacker strength
    if (chance[3] != 0 &amp;&amp; instance_number(obj_dice) == 0)
        draw_text_color(x_start + 32 * 7, y_start + 32, "Combined Attack: " + string(chance[3]), c_black, c_black, c_black, c_black, 1);
    
    // Show target defense
    if (global.target != noone &amp;&amp; instance_number(obj_dice) == 0)
        if (global.target.sprite_index == spr_tread)
            draw_text_color(x_start + 32 * 7, y_start + 64, "Target Defense: Matches attacker", c_black, c_black, c_black, c_black, 1);
        else
            draw_text_color(x_start + 32 * 7, y_start + 64, "Target Defense: " + string(global.target.defense), c_black, c_black, c_black, c_black, 1);
       
    // Show the odds
    if (chance[2] != "null"){
        draw_text_color(x_start + 32 * 7, y_start + 32 * 3, "Odds: " + string(chance[2]), c_black, c_black, c_black, c_black, 1);
        
        // Do kill display
        //draw_text_color(x_start + 32 * 7, y_start + 32 * 4, "Chance to kill: " + string(chance[1] / 6), c_black, c_black, c_black, c_black, 1);   
        draw_text_color(x_start + 32 * 7, y_start + 32 * 4, "Chance to kill: ", c_black, c_black, c_black, c_black, 1);
        
        var x_offset = 125;
        if (chance[1] &gt;= 1){
            draw_sprite_ext(spr_six, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 4 - offset, 0.40, 0.40, 0, c_white, 1 );
            x_offset += 32;
        }
        if (chance[1] &gt;= 2){
            draw_sprite_ext(spr_five, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 4 - offset, 0.40, 0.40, 0, c_white, 1 );
            x_offset += 32;
        }
        if (chance[1] &gt;= 3){
            draw_sprite_ext(spr_four, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 4 - offset, 0.40, 0.40, 0, c_white, 1 );
            x_offset += 32;
        }
        if (chance[1] &gt;= 4){
            draw_sprite_ext(spr_three, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 4 - offset, 0.40, 0.40, 0, c_white, 1 );
            x_offset += 32;
        }
        if (chance[1] &gt;= 5){
            draw_sprite_ext(spr_two, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 4 - offset, 0.40, 0.40, 0, c_white, 1 );
            x_offset += 32;
        } 
        if (chance[1] &gt;= 6){
            draw_sprite_ext(spr_one, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 4 - offset, 0.40, 0.40, 0, c_white, 1 );
            x_offset += 32;
        }
        
        // Show disable rolls
        if (global.turn == "AA"){
            draw_text_color(x_start + 32 * 7, y_start + 32 * 5, "Chance to disable: ", c_black, c_black, c_black, c_black, 1);
            
            var x_offset = 160;
            if (chance[2] == "1:2"){
                draw_sprite_ext(spr_five, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 5 - offset, 0.40, 0.40, 0, c_white, 1 );
                x_offset += 32;
            } 
            if (chance[2] == "1:1"){
                draw_sprite_ext(spr_four, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 5 - offset, 0.40, 0.40, 0, c_white, 1 );
                x_offset += 32;
            }  
            if (chance[2] == "1:1" || chance[2] == "2:1"){
                draw_sprite_ext(spr_three, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 5 - offset, 0.40, 0.40, 0, c_white, 1 );
                x_offset += 32;
            } 
            if (chance[2] == "2:1" || chance[2] == "3:1"){
                draw_sprite_ext(spr_two, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 5 - offset, 0.40, 0.40, 0, c_white, 1 );
                x_offset += 32;
            } 
            if (chance[2] == "3:1" || chance[2] == "4:1"){
                draw_sprite_ext(spr_one, -1, x_start + 32 * 7 + x_offset, y_start + 32 * 5 - offset, 0.40, 0.40, 0, c_white, 1 );
                x_offset += 32;
            }
        }
    }
}

// Tell the player they are trying to cheat... cheecky buggers.
if (global.turn == "DA"){
    var selected_units = 0;
    with (obj_defender){
        if (selected){
            selected_units++;
        }
    }
    if (global.target != noone &amp;&amp; selected_units &gt; 1 &amp;&amp; global.target.sprite_index == spr_tread)
        draw_text(650, 550, "Can not attack treads with multiple units");    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
