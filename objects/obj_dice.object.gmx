<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_die_rolling</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = random(1) + 1;

target = global.target;
global.target = noone;
global.paused = true;

if (global.quick_combat)
    alarm[0] = 1;
else
    alarm[0] = (random(1) + 1.5) * room_speed;

with (obj_result)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show result

roll = floor(random(6)) + 1;

switch (roll){
    case 1:
        sprite_index = spr_six;
        break;
    case 2:
        sprite_index = spr_five;
        break;
    case 3:
        sprite_index = spr_four;
        break;
    case 4:
        sprite_index = spr_three;
        break;
    case 5:
        sprite_index = spr_two;
        break;
    case 6:
        sprite_index = spr_one;
        break;
}

var display = instance_create(784, 160, obj_result);
    
if (global.turn == "AA" || global.turn == "AM"){
    
    if (roll &lt;= kill){
    
         // Kill
        display.sprite_index = spr_kill;
        obj_hex.sprite_index = spr_hex;
        with (target){
            instance_destroy();
        }
        global.defender = noone;
        
        
    } else if (roll &lt;= disable + kill){
    
        // Disable
        display.sprite_index = spr_disable;
        if (target.cost_type == "infantry"){
        
            with(target){
                if (attack == 1){
                    instance_destroy();
                    global.defender = noone;
                } else {
                    //show_debug_message("New attack after disable = " + string(attack--));
                    attack -= 1;
                    defense -= 1;
                    if (sprite_index == spr_infantry_3){
                        sprite_index = spr_infantry_2;
                        name = "Infantry 2"
                    } else {
                        sprite_index = spr_infantry;
                        name = "Infantry 1"
                    }
                }
            }
        } else {
        
            //show_debug_message("Disabled");
            if (target.disabled){
                with (target){
                    display.sprite_index = spr_kill;
                    instance_destroy();
                    global.defender = noone;
                }
            } else {
                target.disabled = true;
                target.disabled_this_turn = true;
            }
        }
    } else {
        // Miss
        display.sprite_index = spr_miss;
    }
    
    if (global.turn == "AM"){
        var tile = get_tile_at_ogre();
        with(tile)
            show_valid_moves(obj_ogre.current_movement);
        
    } else
        obj_hex.sprite_index = spr_hex;
    
} else if (global.turn == "DA") {
    //show_debug_message("Roll: " + string(global.roll));
    
    if (roll &lt;= kill){
    
        // Kill
        display.sprite_index = spr_kill;
        
        if (target.sprite_index != spr_tread){
            
            with (target){
                instance_destroy();
            }
            
            global.unit_selected = "None";
            global.selected_display.this_unit = "None";
        } else {

            // Remove tread units
            display.sprite_index = spr_kill;
            with (obj_tread){
                if (other.combined_attack &gt; 0)
                    instance_destroy();
                other.combined_attack--;
            }
            
            if (instance_number(obj_tread) == 0){
                global.unit_selected = "None";
                global.selected_display.this_unit = "None";
            }
        }
    } else {
        // Miss
        display.sprite_index = spr_miss;
    }
    
} else {
    show_debug_message("Check the dice, it has to be someone's attacking turn");  
}

global.paused = false;
check_win(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_speed &gt; 0){
    image_speed *= .95;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
